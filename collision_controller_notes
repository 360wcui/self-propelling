Script simulateMultiVihecle
the safe controller comes form tfm.checkAASafety and is called uSafe

TMF#checkAASafety.m:
uSafe needs to be cell because controls may have different dimensions in different agents
uSafe is filled componentwise using TMF#checkPWSafety
It checks different safety cases (leader, follower, and free) in our study we have not to included those (MODIFY!)
safe seems to be a matrix with the status of danger of individual i respect to j.
TMF#checkPWSafety.m:
It has different cases depending on the type of vehicle, in our case we only have to work with UTMQuad4D, which uses checkPWSafety_qr_qr

[safe, uSafe, safe_val] = checkPWSafety_qr_qr(obj.qr_qr_safe_V, obj.safetyTime, obj.aas{i}, obj.aas{j});

qr_qr_safe_V:
It is compueted in tm#computeRS whith type qr_qr_safe_V, which search for the file with the qr_qr_safe_v or computes it with quad_quad_collision_2D(colli_rad, speed_lim) if not found.

then computes the qr_qr_safe_V.data on base_x using eval_u from helperOC, similarly with the the qr_qr_safe_v.grad, which is used to compute the optimal controler

the limits for the controler are evader.uMax and evader.uMin which are defined by default in Quad4D class as 3 and -3 by default, but could be overwritten on the vehicle instance before register it in the traffic manager.


# Check:
- The maximum forces for both controllers should be the same.
- Solve the issues with rotate2d, in helperOC.
